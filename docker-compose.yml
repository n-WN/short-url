version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: shorturl_postgres
    environment:
      POSTGRES_DB: shorturl
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/migrations:/docker-entrypoint-initdb.d
    networks:
      - shorturl_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d shorturl"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis/redis-stack:latest
    container_name: shorturl_redis
    ports:
      - "6379:6379"
      - "8001:8001"  # RedisInsight
    volumes:
      - redis_data:/data
    networks:
      - shorturl_network
    command: redis-stack-server --appendonly yes --protected-mode no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  app:
    build: .
    container_name: shorturl_app
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: shorturl
      DB_SSLMODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      APP_PORT: 8080
      APP_ENV: production
      BASE_URL: http://localhost:8080
      BLOOM_FILTER_KEY: used_short_codes
      BLOOM_FILTER_CAPACITY: 1000000
      BLOOM_FILTER_ERROR_RATE: 0.001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shorturl_network

volumes:
  postgres_data:
  redis_data:

networks:
  shorturl_network:
    driver: bridge 